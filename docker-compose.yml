version: "3.9"

# ------------------------------------------------
# Network (attach to your existing "ai-net" too)
# ------------------------------------------------
networks:
  obs-net:
    driver: bridge
  ai-net:
    external: true   # change to false and remove if you don't already have it

# ------------------------------------------------
# Volumes for persistence
# ------------------------------------------------
volumes:
  loki-data:
  prom-data:
  graf-data:

# ------------------------------------------------
# Services
# ------------------------------------------------
services:
  ##########################################################################
  #  OpsHub â€“ your custom micro-service
  ##########################################################################
  opshub:
    build: ./opshub
    container_name: opshub
    restart: unless-stopped
    environment:
      TZ: America/New_York
      # --- retention (active days, archive days, purge days)
      OPS_RETENTION_ACTIVE_DAYS: "7"
      OPS_RETENTION_ARCHIVE_DAYS: "30"
      OPS_RETENTION_PURGE_DAYS: "90"
      # --- comma-sep list of container names to watch
      OPS_TARGET_CONTAINERS: "openwebui,ollama,pipelines,comfyui,authelia,nginx-proxy-manager,postgres-openwebui,postgres-auth,tika"
    volumes:
      # read Docker logs directly
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      # access Docker API safely through socket-proxy (but direct is fine for now)
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # keep all generated logs
      - ./opshub_data:/data
    runtime: nvidia   # allow GPU queries; drop if host has no GPUs
    networks: [obs-net, ai-net]
    ports:
      - "8089:8089"   # FastAPI REST / WebSocket
      - "9188:9188"   # /metrics  (Prometheus)

  ##########################################################################
  #  Loki (log store) + Promtail (log collector)
  ##########################################################################
  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/local-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks: [obs-net]
    ports: ["3100:3100"]

  promtail:
    image: grafana/promtail:3.0.0
    container_name: promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/promtail-config.yaml:/etc/promtail/config.yml:ro
    networks: [obs-net]
    depends_on: [loki]

  ##########################################################################
  #  Prometheus + exporters + Grafana
  ##########################################################################
  prometheus:
    image: prom/prometheus:v2.54.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom-data:/prometheus
    networks: [obs-net]
    ports: ["9090:9090"]

  grafana:
    image: grafana/grafana:11.1.0
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - graf-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks: [obs-net]
    ports: ["3001:3000"]
    depends_on: [prometheus, loki]

  # Host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    network_mode: host
    pid: host
    volumes:
      - /:/host:ro,rslave
    command: ['--path.rootfs=/host']

  # Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    networks: [obs-net]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports: ["8085:8080"]

  # GPU metrics
  dcgm-exporter:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:3.3.7-3.4.0-ubuntu20.04
    container_name: dcgm-exporter
    restart: unless-stopped
    runtime: nvidia
    privileged: true
    networks: [obs-net]
    ports: ["9400:9400"]
