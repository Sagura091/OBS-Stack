# 🪟 Windows 11 Docker Desktop Development Guide

# Windows Docker Compose Override
# This file contains Windows-specific configurations for development testing

version: '3.8'

---

## 🎯 Overview

This guide helps you test the complete observability stack on Windows 11 Docker Desktop, ensuring everything works perfectly before moving to production on your EC2 instance.

**What you'll test:**
- ✅ Complete Docker Compose stack
- ✅ Grafana dashboards and alerts
- ✅ User monitoring for 200+ users simulation
- ✅ Log retention policies
- ✅ Resource scaling (simulated)
- ✅ All CLI tools and APIs

---

## 📋 Prerequisites for Windows 11

### Required Software
- [ ] **Windows 11** (Pro/Enterprise recommended)
- [ ] **Docker Desktop** 4.15+ with WSL2 backend
- [ ] **Python 3.11+** 
- [ ] **PowerShell 7+** (optional, but recommended)
- [ ] **Git for Windows**
- [ ] **VS Code** (recommended for editing)

### System Requirements
- [ ] **8GB RAM minimum** (16GB recommended)
- [ ] **50GB free disk space**
- [ ] **WSL2 enabled**
- [ ] **Hyper-V enabled** (if not using WSL2)

---

## 🔧 Step 1: Setup Windows Environment

### 1.1 Install Docker Desktop
```powershell
# Download from https://www.docker.com/products/docker-desktop/
# Or use winget
winget install Docker.DockerDesktop

# After installation, enable WSL2 backend in Docker Desktop settings
```

### 1.2 Install Python 3.11+
```powershell
# Using winget
winget install Python.Python.3.11

# Or download from python.org
# Verify installation
python --version
pip --version
```

### 1.3 Install Required Tools
```powershell
# Install Git
winget install Git.Git

# Install PowerShell 7 (optional)
winget install Microsoft.PowerShell

# Install VS Code (optional)
winget install Microsoft.VisualStudioCode
```

### 1.4 Configure Docker Desktop
1. Open Docker Desktop
2. Go to **Settings → General**
3. Enable **Use WSL 2 based engine**
4. Go to **Settings → Resources → Advanced**
5. Allocate resources:
   - **Memory:** 8GB (or 50% of your RAM)
   - **CPUs:** 4+ cores
   - **Disk:** 50GB+

---

## 📂 Step 2: Prepare the Project

### 2.1 Clone/Download the OBS Stack
```powershell
# Create development directory
mkdir C:\dev\obs-stack-test
cd C:\dev\obs-stack-test

# Copy your OBS-stack files here
# Or clone from repository
# git clone <your-repo-url> .
```

### 2.2 Windows-Specific File Structure
```
C:\dev\obs-stack-test\
├── docker-compose.yml
├── docker-compose.windows.yml      # Windows overrides
├── grafana/
├── loki/
├── opshub/
├── prometheus/
├── promtail/
├── scripts/
│   ├── setup-windows.ps1           # Windows setup script
│   ├── test-windows.ps1            # Windows testing script
│   └── simulate-users.ps1          # User simulation script
└── docs/
```

---

## 🐳 Step 3: Create Windows Docker Compose Override

<function_calls>
<invoke name="create_file">
<parameter name="content"># Windows Docker Compose Override
# This file contains Windows-specific configurations

version: '3.8'

services:
  # Override paths for Windows
  grafana:
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
  prometheus:
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    
  loki:
    volumes:
      - loki_data:/loki
      - ./loki/local-config.yaml:/etc/loki/local-config.yaml:ro
    
  opshub:
    volumes:
      - opshub_data:/data
      - //var/run/docker.sock:/var/run/docker.sock:ro  # Windows Docker socket
    environment:
      - OPS_ENVIRONMENT=development
      - OPS_DEBUG=true
      - OPS_MAX_USERS=50  # Reduced for testing
      - OPS_SIMULATE_LOAD=true
    
  # Remove GPU-specific services for Windows testing
  # dcgm-exporter:
  #   Remove this service for Windows testing
  
  # Add Windows-specific node exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-windows
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro,rslave
    # Note: Some metrics won't be available on Windows

volumes:
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  opshub_data:
    driver: local

networks:
  ai-net:
    driver: bridge
